Public Class frmMain
    Dim btnNewGame, btnLoadGame, btnQuit, btnHelp, btnRules, btnDelGame, btnClear As New Button
    Dim btn_array(7) As Button
    Private Sub frmMain_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'this creates the form when the game starts to load
        fill_btn_array()    'Fills the button array
        create_board()      'Dynamically creates the board
    End Sub

    Private Sub Load_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This opens the load form
        frmLoad.Show()
        Me.Hide()
    End Sub

    Private Sub New_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This sub is activated when the new game button is clicked
        Me.Hide()               'This hides the main window
        frmNewGame.Show()       'This moves to the new game window for the player to enter their details
    End Sub

    Private Sub Delete_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This opens the delete form
        Me.Hide()
        frmDeleteGame.Show()
    End Sub

    Private Sub Clear_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This button clears the high scores file
        Dim clicked As MsgBoxResult                                         'This is set to the result from a message box button click
        clicked = MsgBox("Are you sure you want to clear the scores?" & vbNewLine & _
               "This cannot be undone", MsgBoxStyle.OkCancel)               'The last argument defines the type of message box displayed, in this case it is an ok/cancel
        If clicked = MsgBoxResult.Ok Then                                   'clicked is set to the result and if the ok button was clicked, clicked is set to MsgBoxResult.Ok
            Dim path As String = Application.StartupPath & "\scores.txt"    'Path is set here to avoid long, unwieldy sentences
            System.IO.File.Open(path, System.IO.FileMode.Truncate).Close()  'This code opens the file in truncate mode and then closes it
        End If
    End Sub

    Private Sub Help_Click(ByVal sender As Object, ByVal e As System.EventArgs)

    End Sub

    Private Sub Rules_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This opens a pdf that has the rules of chess
        'for this reason, Adobe reader is a required installation for the program to work properly
        System.Diagnostics.Process.Start(Application.StartupPath & "\help material\rules of chess.pdf")
    End Sub

    Private Sub Quit_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'End the game
        End
    End Sub

    Private Sub create_board()
        'This creates the five buttons that are used to access certain functionality of the game
        Dim x_coordinate, y_coordinate As Integer
        Dim x_ratio As Single = Screen.PrimaryScreen.Bounds.Width                   'get the width of the screen in pixels
        Dim y_ratio As Single = Screen.PrimaryScreen.Bounds.Height                  'get the height of the screen in pixels
        Me.Size = New System.Drawing.Size(0.165 * x_ratio, 0.5 * y_ratio)           'set the size of the form in relation to the screen
        Me.Location = New System.Drawing.Point(0.42 * x_ratio, 0.25 * y_ratio)      'set the location of the form in relation to the screen
        x_ratio = x_ratio / 1920                                                    'set the x and y ratios of the screen in relation to a 1920x1080 screen
        y_ratio = y_ratio / 1080
        x_coordinate = 70 * x_ratio
        y_coordinate = 40 * y_ratio
        Me.Text = "Chess Game"
        For i = 1 To 7                                                              'This cycles through the button array
            With btn_array(i)
                .Size = New System.Drawing.Size(150 * x_ratio, 45 * y_ratio)        'The size is the same for all the buttons
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)    'The location stays the same in the x co-ordinate and changes in the y co-ordinate
                .Font = New System.Drawing.Font("standard", Int(13 * x_ratio), FontStyle.Regular)  'The font is the same
                Select Case i                                                       'This selects what text to display on each button as well as which click event to assign
                    Case 1
                        .Text = "New Game"
                        AddHandler btn_array(i).Click, AddressOf New_Click
                    Case 2
                        .Text = "Load Game"
                        AddHandler btn_array(i).Click, AddressOf Load_Click
                    Case 3
                        .Text = "Delete Game"
                        AddHandler btn_array(i).Click, AddressOf Delete_Click
                    Case 4
                        .Text = "Clear Scores"
                        AddHandler btnClear.Click, AddressOf Clear_Click
                    Case 5
                        .Text = "Rules"
                        AddHandler btn_array(i).Click, AddressOf Rules_Click
                    Case 6
                        .Text = "Help"
                        AddHandler btn_array(i).Click, AddressOf Help_Click
                    Case 7
                        .Text = "Quit"
                        AddHandler btn_array(i).Click, AddressOf Quit_Click
                End Select
            End With
            y_coordinate = y_coordinate + 60 * y_ratio                              'The y co-ordinate increments by 60 to allow for a 15 pixel gap between button
            Me.Controls.Add(btn_array(i))                                           'Add to controls
        Next i
    End Sub

    Private Sub fill_btn_array()
        'This places all the buttons into an array for easy management
        btn_array(1) = btnNewGame
        btn_array(2) = btnLoadGame
        btn_array(3) = btnDelGame
        btn_array(4) = btnClear
        btn_array(5) = btnRules
        btn_array(6) = btnHelp
        btn_array(7) = btnQuit
    End Sub

End Class


==========================================================================================


Imports System.IO
Public Class frmGame
    Public board(8, 8) As String
    Dim origin, destination, winner As String
    Public turn As String
    Dim click_counter As Integer
    Public p1score, p2score As Integer
    Public p1name, p2name As String
    Dim title As String
    Dim picbox_array(8, 8) As PictureBox
    Dim label_array(8, 2) As Label
    Dim game_ended As Boolean = False
    'These are objects are used in the form creation
    Dim picbox1, picbox2, picbox3, picbox4, picbox5, picbox6, picbox7, picbox8, picbox9, picbox10, picbox11, picbox12, picbox13, picbox14, picbox15, picbox16, picbox17, picbox18, picbox19, picbox20, _
picbox21, picbox22, picbox23, picbox24, picbox25, picbox26, picbox27, picbox28, picbox29, picbox30, picbox31, picbox32, picbox33, picbox34, picbox35, picbox36, picbox37, picbox38, picbox39, picbox40, _
picbox41, picbox42, picbox43, picbox44, picbox45, picbox46, picbox47, picbox48, picbox49, picbox50, picbox51, picbox52, picbox53, picbox54, picbox55, picbox56, picbox57, picbox58, picbox59, picbox60, _
picbox61, picbox62, picbox63, picbox64 As New PictureBox 'used when programmatically creating the board
    Dim lstScores As New ListBox 'these list boxes display a list of the pieces that have been lost by each player
    Dim lstP1Grave, lstP2Grave As New ListBox
    Dim btnRestart, btnQuit, btnHelp, btnSave, btnClear As New Button 'these buttons are used to perform various tasks
    Dim lblA, lblB, lblC, lblD, lblE, lblF, lblG, lblH, lbl1, lbl2, lbl3, lbl4, lbl5, lbl6, lbl7, lbl8 As New Label 'labels used to display co-ordinates
    Dim lblP1Score, lblP2Score As New Label 'display the scores of two players
    Dim lblTurn As New Label 'tells the players who’s turn it is
    Dim lblP1Heading, lblP2heading As New Label
    Dim lblScoresHeading As New Label

    Private Structure people
        'This record holds the name and score of one previous player
        'It will be part of an array of records to hold the scores and names of all previous players
        Dim score As Integer
        Dim name As String
    End Structure

    Private Sub frmGame_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'This activates when the form loads
        'Builds the form and the controls, fills the board array and outputs the board onto the screen
        fill_control_arrays()                   'Fills the control arrays that are used to group screen elements
        create_board()                          'Dynamically creates the board for ease of manipulation
        title = frmNewGame.game_title
        If Not frmLoad.game_loaded Then
            fill_board()                        'Fills the board array with the starting layout
            save_game(title)                    'This saves the new game to a game file in its starting position
            turn = "p1"                         'sets the starting value of turn
        Else
            If frmLoad.p1grave.Length <> 0 Then 'This only activates if the public grave array is not empty
                For Each i In frmLoad.p1grave   'This cycles through the array and puts the contents into the appropriate list box
                    update_grave(i)
                Next
            End If
            If frmLoad.p2grave.Length <> 0 Then
                For Each i In frmLoad.p2grave
                    update_grave(i)
                Next
                lblP1Score.Text = "Score : " & p1score
                lblP2Score.Text = "Score : " & p2score
                lblTurn.Text = "Turn : Player " & Mid(turn, 2, 1)
            End If
        End If
        display_board()                         'outputs the board in its starting position
    End Sub

    Private Sub Action_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This sub is activated by clicking any of the picture boxes that make up the board
        Dim clicked As PictureBox                   'clicked will be the picbox that was clicked
        clicked = sender                            'assigns clicked to the picture box that activated the sub
        clicked.BorderStyle = BorderStyle.Fixed3D   'highlights the selected tile
        click_counter = click_counter + 1
        If click_counter = 1 Then
            origin = clicked.Name                   'This sets the origin variable to the value of the first tile clicked click
            get_all_moves(origin)
        End If
        If click_counter = 2 Then
            destination = clicked.Name
            make_move()                             'makes the move given both the origin and destination picboxes
            click_counter = 0                       'resets click counter to 0
            swap(turn)                              'switches the players turn
            If game_ended Then
                restart_game()                      'This resets the board and deals with restarts
            End If
        End If
    End Sub

    Private Sub Save_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        save_game(title)            'This re-writes the game file with the new data
        MsgBox("Game Saved")        'This outputs a text box that alerts the player that the game has been saved
    End Sub

    Private Sub Restart_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        restart_game()              'This will reset the game board and the game
        save_game(title)            'This saves the game in its restarted mode
    End Sub

    Private Sub Help_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        MsgBox("This'll learn ya!") '
    End Sub

    Private Sub Quit_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This redirects the user to the main form instead of actually quitting
        frmLoad.game_loaded = False 'This sets the game_loaded boolean to false for later use
        frmMain.Show()
        Me.Close()
    End Sub

    Private Sub Clear_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This button is used to clear the high scores list box
        lstScores.Items.Clear()
    End Sub

    Private Sub swap(ByRef turn)
        'This sub is used to change the turn variable
        If turn = "p1" Then
            turn = "p2"
        Else
            turn = "p1"
        End If
    End Sub

    Private Sub create_board()
        'This sub programmatically creates the 8*8 square board of picture boxes
        'This is quicker and easier than manual creation
        'Allows for easy bulk manipulation of the picture boxes
        Dim x_ratio As Single = Screen.PrimaryScreen.Bounds.Width
        Dim y_ratio As Single = Screen.PrimaryScreen.Bounds.Height
        Me.Size = New System.Drawing.Size(0.68 * x_ratio, 0.96 * y_ratio) 'sets the size of the form on the screen  
        Me.Location = New System.Drawing.Point(0.15 * x_ratio, 0)  'sets the location on the screen where the form loads
        x_ratio = x_ratio / 1920
        y_ratio = y_ratio / 1080
        create_tiles(x_ratio, y_ratio)                                  'creates the tiles that make up the board
        create_buttons(x_ratio, y_ratio)                                'creates the buttons that are used on the form
        create_labels(x_ratio, y_ratio)                                 'creates the labels that run along the edge of the board
        create_listboxes(x_ratio, y_ratio)                              'creates the list boxes that are used on the form
    End Sub

    Private Sub create_tiles(x_ratio, y_ratio)
        'Create the 8 * 8 board of picture boxes that are used to display the pieces
        'The boxes are in a picturebox array for ease of manipulation
        Dim x_coordinate, y_coordinate As Integer
        For y = 1 To 8                                                  'Cycles through the two dimensional array "picbox_array" and defines the objects within
            For x = 1 To 8
                x_coordinate = 5 * x_ratio * (19 * x + 35)              'This separates the picture boxes by 95 pixels in the x axis
                y_coordinate = 5 * y_ratio * (19 * y + 3)               'This separates the picture boxes by 95 pixels in the y axis
                With picbox_array(x, y)                         'for some reason, VB uses (y, x) instead of (x, y)
                    .Name = "picTile" & (8 * y - 8 + x)       'This will name the picture box "picTile" + n where n is an integer
                    .Size = New System.Drawing.Point(95 * x_ratio, 95 * y_ratio)    'The size will be all the same, almost square
                    .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
                    .SizeMode = PictureBoxSizeMode.StretchImage
                End With
                Me.Controls.Add(picbox_array(x, y))             'Add picbox to the controls
                AddHandler picbox_array(x, y).Click, AddressOf Action_Click 'link button click to action click sub
            Next x
        Next y
    End Sub

    Private Sub create_buttons(x_ratio, y_ratio)
        'Creates the buttons that are used on the form
        'This sub must add click events as well as define the buttons features
        Dim x_coordinate, y_coordinate As Integer
        y_coordinate = 900 * y_ratio                                            'The y co-ordinate is constant for all the buttons
        x_coordinate = 955 * x_ratio
        With btnSave                                                        'This defines the button btnSave
            .Size = New System.Drawing.Size(75 * x_ratio, 35 * y_ratio)
            .Text = "Save"
            .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
            .Font = New System.Drawing.Font("standard", Int(11 * x_ratio), FontStyle.Regular)
        End With
        x_coordinate = x_coordinate + 80 * x_ratio                                    'The x_coordinate is incremented by 80 to allow for a 5 pixle gap
        With btnHelp                                                        'This defines the button btnHelp
            .Size = New System.Drawing.Size(75 * x_ratio, 35 * y_ratio)
            .Text = "Help"
            .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
            .Font = New System.Drawing.Font("standard", Int(11 * x_ratio), FontStyle.Regular)
        End With
        x_coordinate = x_coordinate + 80 * x_ratio
        With btnRestart                                                     'This defines the button btnRestart
            .Size = New System.Drawing.Size(75 * x_ratio, 35 * y_ratio)
            .Text = "Restart"
            .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
            .Font = New System.Drawing.Font("standard", Int(10 * x_ratio), FontStyle.Regular)
        End With
        x_coordinate = x_coordinate + 80 * x_ratio
        With btnQuit                                                        'This defines the button btnQuit
            .Size = New System.Drawing.Size(75 * x_ratio, 35 * y_ratio)
            .Text = "Quit"
            .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
            .Font = New System.Drawing.Font("standard", Int(11 * x_ratio), FontStyle.Regular)
        End With

        'Add buttons to controls
        Me.Controls.Add(btnSave)
        Me.Controls.Add(btnHelp)
        Me.Controls.Add(btnRestart)
        Me.Controls.Add(btnQuit)
        'assign buttons to click events
        AddHandler btnSave.Click, AddressOf Save_Click
        AddHandler btnHelp.Click, AddressOf Help_Click
        AddHandler btnRestart.Click, AddressOf Restart_Click
        AddHandler btnQuit.Click, AddressOf Quit_Click

        'This defines the clear button that is used to clear the high scores list box
        With btnClear
            .Location = New System.Drawing.Point(1120 * x_ratio, 620 * y_ratio)
            .Size = New System.Drawing.Size(75 * x_ratio, 35 * y_ratio)
            .Text = "Clear"
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
        End With
        'Add button to controls
        Me.Controls.Add(btnClear)
        'Add click event
        AddHandler btnClear.Click, AddressOf Clear_Click
    End Sub

    Private Sub create_labels(x_ratio, y_ratio)
        'Create the labels that go across the top and down the side of the board
        'letters go across the top of the board
        Dim x_coordinate, y_coordinate As Integer
        For x = 1 To 8
            x_coordinate = 5 * x_ratio * (19 * x + 42)                                       'The x co-ordinate changes by 95 pixels
            y_coordinate = 85 * y_ratio                                                       'the y co-ordinate is stationary, this creates a straight line
            With label_array(x, 2)                                                  'define the label properties
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
                .Text = Chr(64 + x)                                                 'The ascii character for the capital letter relating to the number (1 = A, 2 = B)
                .Size = New System.Drawing.Size(70 * x_ratio, 30 * y_ratio)                             'The label size
                .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)  'The font and text size
            End With
            Me.Controls.Add(label_array(x, 2))                                      'Add to the controls
        Next x
        'numbers go down the left side of the board
        For y = 1 To 8
            x_coordinate = 250 * x_ratio                                                      'The x co-ordinate is stationary
            y_coordinate = 5 * y_ratio * (19 * y + 10)                                       'The y co-ordinate increments by 95, starting at 145 pixels in
            With label_array(y, 1)
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
                .Text = y
                .Size = New System.Drawing.Size(50 * x_ratio, 30 * y_ratio)
                .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
            End With
            Me.Controls.Add(label_array(y, 1))                                      'Add label to the controls
        Next y

        'create the labels that display the players score
        With lblP1Score
            .Text = p1name & " : 0"
            .Location = New System.Drawing.Point(70 * x_ratio, 150 * y_ratio)
            .Size = New System.Drawing.Size(130 * x_ratio, 25 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
        End With
        With lblP2Score
            .Text = p2name & " : 0"
            .Location = New System.Drawing.Point(70 * x_ratio, 400 * y_ratio)
            .Size = New System.Drawing.Size(130 * x_ratio, 25 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
        End With
        'Add to controls
        Me.Controls.Add(lblP1Score)
        Me.Controls.Add(lblP2Score)

        'Create the label that tells the players who's turn it is
        With lblTurn
            .Text = "Turn : Player 1"
            .Location = New System.Drawing.Point(70 * x_ratio, 105 * y_ratio)
            .Size = New System.Drawing.Size(140 * x_ratio, 25 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
        End With
        'Add to controls
        Me.Controls.Add(lblTurn)

        'Create the heading labels
        With lblP1Heading
            .Text = p1name
            .Size = New System.Drawing.Size(250 * x_ratio, 50 * y_ratio)
            .Location = New System.Drawing.Point(570 * x_ratio, 35 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(20 * x_ratio), FontStyle.Underline)
        End With
        With lblP2heading
            .Text = p2name
            .Size = New System.Drawing.Size(250 * x_ratio, 50 * y_ratio)
            .Location = New System.Drawing.Point(570 * x_ratio, 885 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(20 * x_ratio), FontStyle.Underline)
        End With
        'Add labels to controls
        Me.Controls.Add(lblP1Heading)
        Me.Controls.Add(lblP2heading)

        'Create the title of the scores listbox
        With lblScoresHeading
            .Location = New System.Drawing.Point(1075 * x_ratio, 75 * y_ratio)
            .Size = New System.Drawing.Size(170 * x_ratio, 30 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(16 * x_ratio), FontStyle.Underline)
            .Text = "High Scores"
        End With
        Me.Controls.Add(lblScoresHeading) 'add labels to controls
    End Sub

    Private Sub create_listboxes(x_ratio, y_ratio)
        'creates the list boxes that will be used in the program
        'Create the listbox that displays the scores
        With lstScores
            .Size = New System.Drawing.Size(170 * x_ratio, 500 * y_ratio)
            .Location = New System.Drawing.Point(1070 * x_ratio, 110 * y_ratio)
        End With
        'Add to controls
        Me.Controls.Add(lstScores) 'add listbox to controls

        'Create the list boxes that display the grave of each player
        With lstP1Grave
            .Size = New System.Drawing.Size(160 * x_ratio, 200 * y_ratio)
            .Location = New System.Drawing.Point(60 * x_ratio, 180 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(10 * x_ratio), FontStyle.Regular)
        End With
        With lstP2Grave
            .Size = New System.Drawing.Size(160 * x_ratio, 200 * y_ratio)
            .Location = New System.Drawing.Point(60 * x_ratio, 430 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(10 * x_ratio), FontStyle.Regular)
        End With
        'Add to controls
        Me.Controls.Add(lstP1Grave)
        Me.Controls.Add(lstP2Grave)
    End Sub

    Private Sub fill_control_arrays()
        'fills the picbox_array with the required picture boxes
        picbox_array(1, 1) = picbox1
        picbox_array(2, 1) = picbox2
        picbox_array(3, 1) = picbox3
        picbox_array(4, 1) = picbox4
        picbox_array(5, 1) = picbox5
        picbox_array(6, 1) = picbox6
        picbox_array(7, 1) = picbox7
        picbox_array(8, 1) = picbox8
        picbox_array(1, 2) = picbox9
        picbox_array(2, 2) = picbox10
        picbox_array(3, 2) = picbox11
        picbox_array(4, 2) = picbox12
        picbox_array(5, 2) = picbox13
        picbox_array(6, 2) = picbox14
        picbox_array(7, 2) = picbox15
        picbox_array(8, 2) = picbox16
        picbox_array(1, 3) = picbox17
        picbox_array(2, 3) = picbox18
        picbox_array(3, 3) = picbox19
        picbox_array(4, 3) = picbox20
        picbox_array(5, 3) = picbox21
        picbox_array(6, 3) = picbox22
        picbox_array(7, 3) = picbox23
        picbox_array(8, 3) = picbox24
        picbox_array(1, 4) = picbox25
        picbox_array(2, 4) = picbox26
        picbox_array(3, 4) = picbox27
        picbox_array(4, 4) = picbox28
        picbox_array(5, 4) = picbox29
        picbox_array(6, 4) = picbox30
        picbox_array(7, 4) = picbox31
        picbox_array(8, 4) = picbox32
        picbox_array(1, 5) = picbox33
        picbox_array(2, 5) = picbox34
        picbox_array(3, 5) = picbox35
        picbox_array(4, 5) = picbox36
        picbox_array(5, 5) = picbox37
        picbox_array(6, 5) = picbox38
        picbox_array(7, 5) = picbox39
        picbox_array(8, 5) = picbox40
        picbox_array(1, 6) = picbox41
        picbox_array(2, 6) = picbox42
        picbox_array(3, 6) = picbox43
        picbox_array(4, 6) = picbox44
        picbox_array(5, 6) = picbox45
        picbox_array(6, 6) = picbox46
        picbox_array(7, 6) = picbox47
        picbox_array(8, 6) = picbox48
        picbox_array(1, 7) = picbox49
        picbox_array(2, 7) = picbox50
        picbox_array(3, 7) = picbox51
        picbox_array(4, 7) = picbox52
        picbox_array(5, 7) = picbox53
        picbox_array(6, 7) = picbox54
        picbox_array(7, 7) = picbox55
        picbox_array(8, 7) = picbox56
        picbox_array(1, 8) = picbox57
        picbox_array(2, 8) = picbox58
        picbox_array(3, 8) = picbox59
        picbox_array(4, 8) = picbox60
        picbox_array(5, 8) = picbox61
        picbox_array(6, 8) = picbox62
        picbox_array(7, 8) = picbox63
        picbox_array(8, 8) = picbox64

        'Fill label array
        'lbl(n, 1) is the numbered labels, lbl(n, 2) is the lettered ones
        label_array(1, 1) = lbl1
        label_array(2, 1) = lbl2
        label_array(3, 1) = lbl3
        label_array(4, 1) = lbl4
        label_array(5, 1) = lbl5
        label_array(6, 1) = lbl6
        label_array(7, 1) = lbl7
        label_array(8, 1) = lbl8
        label_array(1, 2) = lblA
        label_array(2, 2) = lblB
        label_array(3, 2) = lblC
        label_array(4, 2) = lblD
        label_array(5, 2) = lblE
        label_array(6, 2) = lblF
        label_array(7, 2) = lblG
        label_array(8, 2) = lblH
    End Sub

    Private Sub fill_board()
        'Fills the board array in its starting position
        'Follows the rules of chess in its layout
        'places the pawns in their positions
        For x = 1 To 8
            board(x, 2) = "wp"
            board(x, 7) = "bp"
        Next
        'Place the other pieces in their correct positions
        board(1, 1) = "wr"
        board(2, 1) = "wh"
        board(3, 1) = "wb"
        board(4, 1) = "wq"
        board(5, 1) = "wk"
        board(6, 1) = "wb"
        board(7, 1) = "wh"
        board(8, 1) = "wr"
        board(1, 8) = "br"
        board(2, 8) = "bh"
        board(3, 8) = "bb"
        board(4, 8) = "bq"
        board(5, 8) = "bk"
        board(6, 8) = "bb"
        board(7, 8) = "bh"
        board(8, 8) = "br"

        'this fills the rest of the array with "" values
        'this is instead of Nothing values
        For x = 1 To 8
            For y = 3 To 6
                board(x, y) = ""
            Next y
        Next x
    End Sub

    Private Function get_background(x As Integer, y As Integer) As Color
        'These If statements display the checked background that chess boards have
        If x Mod 2 = 0 And y Mod 2 = 0 Then
            Return Color.White
        End If
        If x Mod 2 <> 0 And y Mod 2 = 0 Then
            Return Color.DarkGray
        End If
        If x Mod 2 = 0 And y Mod 2 <> 0 Then
            Return Color.DarkGray
        End If
        If x Mod 2 <> 0 And y Mod 2 <> 0 Then
            Return Color.White
        End If
    End Function
    Private Sub display_board()
        'This sub takes the board array and outputs it onto the screen
        Dim pic As String = ""          'stores the acronym for the picture
        For x = 1 To 8
            For y = 1 To 8
                picbox_array(x, y).BackColor = get_background(x, y)
                'display the pictures of the pieces on the board
                pic = board(x, y)
                If pic = "" Then        'if pic = "", then an error will occur because no picture found
                    picbox_array(x, y).Image = Nothing
                Else
                    picbox_array(x, y).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & pic & ".png")
                End If
                picbox_array(x, y).BorderStyle = BorderStyle.None
            Next y
        Next x
    End Sub

    Private Sub restart_game()
        'This sub deals with restarting the game and resetting the board
        fill_board()            're fills the board array to the opening format
        display_board()         'outputs the re filled board onto the screen in its starting layout
        lblP1Heading.Text = p1name
        lblP2heading.Text = p2name
        lstP1Grave.Items.Clear()
        lstP2Grave.Items.Clear()
        game_ended = False      'begins the new game
        click_counter = 0
        turn = "p1"
        lblTurn.Text = "Turn : Player 1"
        p1score = 0
        p2score = 0
        lblP1Score.Text = p1name & " : " & p1score
        lblP2Score.Text = p2name & " : " & p2score
    End Sub

    Private Sub make_move()
        'This sub deals with the player making a move.
        'It controls the flow of logic
        Dim move(2, 2) As Integer                                           'A 2D array storing [[origin x, origin y], [destination x, destination y]]
        Dim attacking, piece As String                                      'Attacking stores the acronym of the piece (if any) that is being taken
        Dim valid As Boolean = False                                        'This is used to validate moves
        Dim castle As Boolean = False                                       'This is used to validate a castle move
        Dim side As String
        get_move(move, piece)                                               'This sub gets the raw data (origin, destination) and fills the move array
        check_move(piece, move, valid)                                      'This sub checks the move using global variables (board) as well as the move array
        castle = check_castle(piece, move)
        attacking = board(move(2, 1), move(2, 2))                           'This gets the piece that the player is taking
        For x = 1 To 8
            For y = 1 To 8
                picbox_array(x, y).BorderStyle = BorderStyle.None           'This resets the borderstyles of all the tiles
                picbox_array(x, y).BackColor = get_background(x, y)         'This resets the backgrounds of all of the tiles
            Next
        Next
        If Not valid And Not castle Then                                    'This accounts for invalid moves
            click_counter = 0                                               'Reset click_counter
            swap(turn)                                                      'Swapping the turn here means that when it is swapped later, it is back to it's original value
        End If
        If valid Then
            execute(move, piece, attacking)                                 'If the move is valid, execute it on the board
        End If
        If castle Then                                                      'This executes if the player has selected to castle
            If move(2, 1) = 3 Then                                          'This identifies the type of castle move (king or queen side)
                side = "queen"
            Else
                side = "king"
            End If
            update_castle(move, piece, side)                                'Update the board with the castle move
        End If
    End Sub

    Private Sub save_game(game_title)
        'This sub must save games to a given file that is defined by the games title
        'It works by resetting the file to have nothing in it
        'And then re writing all the data into it in a specific order so that it can be read by the computer later
        Dim path As String = Application.StartupPath & "\saved games\" & game_title & ".txt"    'Path is set here to avoid long, unweidly scentences
        System.IO.File.Open(path, System.IO.FileMode.Truncate).Close()                          'This code resets the contents of the file
        FileSystem.FileOpen(1, path, OpenMode.Append)                                           'Open the file in append mode
        FileSystem.WriteLine(1, p1name)                                                         'append P1name to file
        FileSystem.WriteLine(1, p1score)                                                        'append P1score to file
        FileSystem.WriteLine(1, p2name)                                                         'append P2name to file
        FileSystem.WriteLine(1, p2score)                                                        'append p2score to file
        FileSystem.WriteLine(1, turn)                                                           'append turn to file
        For y = 1 To 8
            For x = 1 To 8
                FileSystem.WriteLine(1, board(x, y))                                            'append the board array to the file in a specific order (across then down)
            Next
        Next
        FileSystem.FileClose(1)                                                                 'close the file
    End Sub

    Private Sub get_move(ByRef move, ByRef piece)
        'uses board, origin and destination as its global input
        'This sub must determine the players move given the tiles that were clicked
        'as well as the piece on that tile
        Dim length, temp As Integer
        length = origin.Length
        temp = Int(Mid(origin, 8))              'This is the number of the picbox clicked
        'e.g. if origin = picTile34, temp = 34
        'This gets the x, y co-ordinates of the origin tile
        move(1, 1) = ((temp - 1) Mod 8) + 1     'x co-ordinate origin
        move(1, 2) = Int((temp - 1) / 8) + 1    'y co-ordinate origin

        'this gets the destination co-ordinates
        length = destination.Length
        temp = Int(Mid(destination, 8))
        move(2, 1) = ((temp - 1) Mod 8) + 1
        move(2, 2) = Int((temp - 1) / 8) + 1
        piece = board(move(1, 1), move(1, 2))   'this is the piece being moved
        'move now contains the two co-ordinates of the move
        'e.g. if move contains [(3, 4), (4, 5)] it would represent a move origin point (3, 4) to point (4, 5). 
        'piece now contains the acronym of the piece moving
    End Sub

    Private Sub check_move(ByVal piece, ByVal move, ByRef valid)
        'This sub takes the piece and move array and assigns functions to check the move. It then sets valid to an appropriate boolean value
        'This does not do any of the calculations itself, it merely assigns functions to do that
        valid = True                                                'Assume move is true
        If (turn = "p1" And Mid(piece, 1, 1) <> "w") Or (turn = "p2" And Mid(piece, 1, 1) <> "b") Then
            valid = False                                           'checks that the player is moving the correct piece
        End If
        If move(1, 1) = move(2, 1) And move(1, 2) = move(2, 2) Then
            valid = False                                           'This is the case where the player hasn't moved
        End If
        If valid = True Then                                        'This assigns an appropriate function
            Select Case Mid(piece, 2, 1)                            'This gets the right character of the piece string (the piece being moved)
                Case "p" : valid = check_pawn(piece, move)          'Case pawn is moved
                Case "r" : valid = check_rook(piece, move)          'Case rook is moved
                Case "h" : valid = check_horse(piece, move)         'Case knight is moved (h is used for horse to avoid conflict with the king which also uses k)
                Case "b" : valid = check_bishop(piece, move)        'Case bishop is moved
                Case "q" : valid = check_queen(piece, move)         'Case queen is moved
                Case "k" : valid = check_king(piece, move)          'Case king is moved
            End Select
        End If
    End Sub

    Private Sub get_all_moves(origin)
        'This scans the whole board and gets all possible moves that the player can make with a particular clicked piece
        'It uses the check_piece sub to get a boolean value for the validity of every possible move
        'The local move data structure is used here to simulate the data structure of the game
        'All possible destination squares are highlighted blue
        'This has to be reset once the player has made their second click
        Dim valid As Boolean = False                'Used to check each destination
        Dim castle As Boolean = False
        Dim move(2, 2) As Integer
        Dim length, temp, x_coordinate, y_coordinate As Integer
        Dim piece As String
        length = origin.Length
        temp = Int(Mid(origin, 8))                  'This is the number of the picbox clicked
        'e.g. if origin = picTile34, temp = 34
        'This gets the x, y co-ordinates of the origin tile
        x_coordinate = ((temp - 1) Mod 8) + 1       'x co-ordinate origin
        y_coordinate = Int((temp - 1) / 8) + 1      'y co-ordinate origin
        piece = board(x_coordinate, y_coordinate)   'Get the piece that has been clicked
        move(1, 1) = x_coordinate                   'set the x, y co_ordinates of the origin
        move(1, 2) = y_coordinate
        For y = 1 To 8                              'Cycle through the array and check each tile
            For x = 1 To 8
                move(2, 1) = x                      'set x and y
                move(2, 2) = y
                check_move(piece, move, valid)      'Check the tile
                If valid Then                       'If valid, change the background and borderstyle
                    'This turns the boxes light blue to distinguish them from normal tiles
                    picbox_array(move(2, 1), move(2, 2)).BackColor = Color.LightBlue
                    picbox_array(move(2, 1), move(2, 2)).BorderStyle = BorderStyle.FixedSingle
                End If
                valid = False                       'reset valid
                castle = check_castle(piece, move)
                If castle Then                      'This deals with all valid castle moves (king and queen side)
                    'This turns the boxes salmon to distinguish them from normal moves
                    picbox_array(move(2, 1), move(2, 2)).BackColor = Color.LightSalmon
                    picbox_array(move(2, 1), move(2, 2)).BorderStyle = BorderStyle.FixedSingle
                End If
            Next x
        Next y
    End Sub

    Private Sub execute(move, piece, attacking)
        If attacking <> "" Then             'This will be "" if not attacking
            update_score(attacking)         'If activated, the score will be updated according to the rules of chess
            update_grave(attacking)
        End If
        If Mid(attacking, 2, 1) = "k" Then  'This checks if the king piece has been taken
            game_ended = True               'if the king has been taken, the game is over
            If Mid(piece, 1, 1) = "w" Then  'this determines the winner of the game
                winner = "p2"
            Else
                winner = "p1"
            End If
            scoring()                       'This deals the scoring when the winner is determined
        Else
            update_board(move, piece)       'This updates the board
        End If
    End Sub

    Private Sub update_score(attacking)
        'This sub must take the attacking variable and update the appropriate score with appropriate values
        Const p = 1                             'the scores of taking each piece
        Const r = 5
        Const h = 3
        Const b = 3
        Const q = 9
        Const k = 0
        If turn = "p1" Then                     'will increment p1's score
            Select Case Mid(attacking, 2, 1)
                Case "p" : p1score = p1score + p
                Case "r" : p1score = p1score + r
                Case "h" : p1score = p1score + h
                Case "b" : p1score = p1score + b
                Case "q" : p1score = p1score + q
                Case "k" : p1score = p1score + k
            End Select
        Else
            Select Case Mid(attacking, 2, 1)    'update p2's score
                Case "p" : p2score = p2score + p
                Case "r" : p2score = p2score + r
                Case "h" : p2score = p2score + h
                Case "b" : p2score = p2score + b
                Case "q" : p2score = p2score + q
                Case "k" : p2score = p2score + k
            End Select
        End If
        lblP1Score.Text = "Player 1 : " & p1score 'update the labels that display the scores
        lblP2Score.Text = "Player 2 : " & p2score
    End Sub

    Private Sub update_castle(move, piece, side)
        'This sub updates the board when a valid castle move has been submitted
        'There are two different types of castle, queen side and king side
        'That is why there is a different protocol for the king and queen side castle

        'The king side castle moves the king from its starting position two places right and moves the rook two places left
        If side = "king" Then
            board(move(1, 1), move(1, 2)) = ""                      'update the board with the kings move (two places right)
            board(move(2, 1), move(2, 2)) = piece
            picbox_array(move(1, 1), move(1, 2)).Image = Nothing    'Update the pictures with the kings move
            picbox_array(move(2, 1), move(2, 2)).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & piece & ".png")
            board(8, move(2, 2)) = ""                               'Update the board with the rooks move (two places left)
            board(6, move(2, 2)) = Mid(piece, 1, 1) & "r"
            picbox_array(8, move(2, 2)).Image = Nothing             'Update the pictures with the rooks move
            picbox_array(6, move(2, 2)).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & Mid(piece, 1, 1) & "r.png")
        Else    'The queen side castle moves the king two places left and the rook three places right
            board(move(1, 1), move(1, 2)) = ""                      'Update the board with the kings move (two places left)
            board(move(2, 1), move(2, 2)) = piece
            picbox_array(move(1, 1), move(1, 2)).Image = Nothing    'Update the pictures with the kings move
            picbox_array(move(2, 1), move(2, 2)).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & piece & ".png")
            board(1, move(2, 2)) = ""                               'Update the board with the rooks move (Three places right)
            board(4, move(2, 2)) = Mid(piece, 1, 1) & "r"
            picbox_array(1, move(2, 2)).Image = Nothing             'Update the pictures with the rooks move
            picbox_array(4, move(2, 2)).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & Mid(piece, 1, 1) & "r.png")
        End If
        If Mid(lblTurn.Text, 15, 1) = "1" Then                      'toggle turn label
            lblTurn.Text = "Turn : Player 2"
        Else
            lblTurn.Text = "Turn : Player 1"
        End If
    End Sub

    Private Function check_castle(piece As String, move(,) As Integer) As Boolean
        'This function checks a given move and checks whether it is a valid castle move
        'A castle move is where the king and the rook both move to set locations in one turn
        'There are two types of castle, king and queen side
        'There are two criteria to castle. The king and rook must be in their starting positions, there must be no pieces in between the king and queen.
        'It is a crucial move in chess
        Dim a, b, c, d As Boolean   'These are used to outsource some of the boolean calculations involved in testing a castle move
        'This checks that the player is moving his/her piece
        If (turn = "p1" And board(move(1, 1), move(1, 2)) = "bk") Or (turn = "p2" And board(move(1, 1), move(1, 2)) = "wk") Then
            Return False
        End If
        If Mid(piece, 1, 1) = "w" Then              'This handles a white castle
            'The variables a and b deal with the king side castle
            'a checks that the move represents a valid castle move
            a = move(1, 1) = 5 And move(1, 2) = 1 And move(2, 2) = 1 And move(2, 1) = 7
            'b checks that the pieces are in their required positions and that the tiles in between are vacant
            b = board(7, 1) = "" And board(8, 1) = "wr" And board(6, 1) = "" And board(5, 1) = "wk"
            'the variables c and d deal with the queen side castle
            'c checks that the move represents a valid castle move
            c = move(1, 1) = 5 And move(1, 2) = 1 And move(2, 2) = 1 And move(2, 1) = 3
            'd checks that the pieces are in their required positions and that the tiles in between are vacant
            d = board(2, 1) = "" And board(3, 1) = "" And board(4, 1) = "" And board(1, 1) = "wr" And board(5, 1) = "wk"
            If (a And b) Or (c And d) Then      'The function returns true for both valid king and queen side castle moves
                Return True
            End If
        Else                                        'This handles a black castle
            'The variables a and b deal with the king side castle
            'a checks that the move represents a valid castle move
            a = move(1, 1) = 5 And move(1, 2) = 8 And move(2, 2) = 8 And move(2, 1) = 7
            'b checks that the pieces are in their required positions and that the tiles in between are vacant
            b = board(7, 8) = "" And board(8, 8) = "br" And board(6, 8) = "" And board(5, 8) = "bk"
            'the variables c and d deal with the queen side castle
            'c checks that the move represents a valid castle move
            c = move(1, 1) = 5 And move(1, 2) = 8 And move(2, 2) = 8 And move(2, 1) = 3
            'd checks that the pieces are in their required positions and that the tiles in between are vacant
            d = board(2, 8) = "" And board(3, 8) = "" And board(4, 8) = "" And board(1, 8) = "br" And board(5, 8) = "bk"
            If (a And b) Or (c And d) Then      'The function returns true for both valid king and queen side castle moves
                Return True
            End If
        End If
        Return False                            'return false for all invalid castle moves
    End Function

    Private Sub update_grave(attacking)
        'This sub updates the grave list that lists all hte pieces that each player has lost and their value
        Const p = 1                             'the scores of taking each piece
        Const r = 5
        Const h = 3
        Const b = 3
        Const q = 9
        Const k = 0
        Select Case attacking                   'This checks the piece that is being taken and uses its colour to place it in the correct list
            Case "wp" : lstP1Grave.Items.Add("White Pawn " & p & "pt")
            Case "wr" : lstP1Grave.Items.Add("White Rook " & r & "pts")
            Case "wh" : lstP1Grave.Items.Add("White Horse " & h & "pts")
            Case "wb" : lstP1Grave.Items.Add("White Bishop " & b & "pts")
            Case "wq" : lstP1Grave.Items.Add("White Queen " & q & "pts")
            Case "wk" : lstP1Grave.Items.Add("White King " & k & "pts")
            Case "bp" : lstP2Grave.Items.Add("Black Pawn " & p & "pt")
            Case "br" : lstP2Grave.Items.Add("Black Rook " & r & "pts")
            Case "bh" : lstP2Grave.Items.Add("Black Horse " & h & "pts")
            Case "bb" : lstP2Grave.Items.Add("Black Bishop " & b & "pts")
            Case "bq" : lstP2Grave.Items.Add("Black Queen " & q & "pts")
            Case "bk" : lstP2Grave.Items.Add("Black King " & k & "pts")
        End Select
    End Sub

    Private Sub update_board(move, piece)
        change_pawn(piece, move)
        'This sub will change the board_array and the board
        picbox_array(move(1, 1), move(1, 2)).Image = Nothing    'Update the board pictures
        picbox_array(move(2, 1), move(2, 2)).Image = Image.FromFile(Application.StartupPath & "\chess pieces\" & piece & ".png")
        board(move(1, 1), move(1, 2)) = ""                      'Update the board array
        board(move(2, 1), move(2, 2)) = piece
        If Mid(lblTurn.Text, 15, 1) = "1" Then                  'toggle turn label
            lblTurn.Text = "Turn : Player 2"
        Else
            lblTurn.Text = "Turn : Player 1"
        End If
    End Sub

    Private Sub change_pawn(ByRef piece, move)
        'This sub deals with a pawn that has reached the other players end
        'The rules of chess say that you have to exchange the pawn for a queen of the same colour
        If (piece = "bp" And move(2, 2) = 1) Or (piece = "wp" And move(2, 2) = 8) Then
            'This checks if the piece being moved is a pawn and if it is in the required position
            frmPawnSelection.ShowDialog()                                   'This is a customised dialogue box which suspends code execution until it is closed
            'It allows the player to select the piece that they wish to promote
            If piece = "bp" Then                                            'This swaps the black pawn for a black piece of the players choosing
                piece = "b" & frmPawnSelection.promotion_selection
            Else
                piece = "w" & frmPawnSelection.promotion_selection          'This swaps the white pawn for a white piece of the players choosing
            End If
        End If
    End Sub

    Private Sub scoring()
        'This sub Handles the score submission process and outputs the scores onto the board
        Dim scores(0) As people
        write_file(p1name, p1score)         'write the two score, name sets to the scores.txt file
        write_file(p2name, p2score)
        get_high_scores(scores)             'read the whole file into two arrays (names and scores)
        scores = sort_scores(scores)        'temp is the an array of arrays that gets the output from sort_scores\
        disp_high_scores(scores)
    End Sub

    Private Sub get_high_scores(ByRef scores() As people)
        'This sub reads the scores sequential file and places the values into two arrays storing the names and corresponding scores
        Dim temp_name, temp_score As String                                 'The temporary values that are then validated before being placed in their arrays
        Dim counter As Integer
        counter = 0
        FileOpen(1, Application.StartupPath & "\scores.txt", OpenMode.Input) 'Open the file
        While Not EOF(1)                                                    'Check for the end of file before attempting to read from it
            FileSystem.Input(1, temp_name)                                  'read the name value into temp_name (the file is constructed in {name : score} pairs
            FileSystem.Input(1, temp_score)                                 'read the score value into temp_score
            If validate_integer(temp_score) Then                            'This validates the integer for good measure
                scores(counter).score = CInt(temp_score)                    'this converts the now validated integer and puts it into the array
            End If
            scores(counter).name = temp_name
            counter = counter + 1
            ReDim Preserve scores(counter)                                  'increase the length of the arrays by one
        End While
        FileSystem.FileClose(1)
        ReDim Preserve scores(counter - 1)                                  'decrease the length of the arrays because the last element is always empty
    End Sub

    Private Sub disp_high_scores(scores() As people)
        'This sub displays the ordered {name : score} pairs into the listbox
        lstScores.Items.Clear()                     'Clear the scores from any previous games
        For i = 1 To scores.Length - 1              'Cycle through the parallel scores & names array and output the pairs
            lstScores.Items.Add(scores(i).name)
            lstScores.Items.Add(scores(i).score)
        Next
    End Sub

    Private Sub write_file(name, score)
        'This sub appends the name and score to the file
        FileSystem.FileOpen(1, Application.StartupPath & "\scores.txt", OpenMode.Append)    'open file in append mode
        FileSystem.WriteLine(1, name)                                                       'write the name to the file
        FileSystem.WriteLine(1, score)                                                      'Write the score to the file
        FileSystem.FileClose(1)                                                             'Close the file
    End Sub

    Private Function sort_scores(scores() As people) As Array
        'Sorts in decending order using a selection sort
        'much faster than bubble sort for large data sets
        'This takes two parallel arrays (scores and names) and returns an array of length two that contains the sorted array "scores" and the 
        'array "names" with the values in the same position as scores
        'e.g scores = [3,6,2,4], names = [AMH, TIS, FED, IDH], sort_scores(scores, names) returns an array containing [[6,4,2,3] , [TIS,IDH,AMH,FED]]
        Dim end_unsorted, temp_int, min, i, posmax As Integer 'temp_int and temp_str are used to store temporary values of different data types
        Dim temp_str As String
        Dim output(2) As Array              'This is the array used to output the two arrays (scores and names)
        end_unsorted = scores.Length - 1    'The last element in the array scores
        temp_int = 0
        While end_unsorted > 1
            i = 1
            min = scores(i).score           'set the min to the first array element
            posmax = 1                      'set the index (posmax) to 1
            While i < end_unsorted
                i = i + 1
                If scores(i).score < min Then 'compare the ith element of scores with the current min value
                    min = scores(i).score   'if the ith element is less, set min to the ith element
                    posmax = i
                End If
            End While
            'swap scores(posmax) with scores(end_unsorted)
            temp_int = scores(posmax).score
            scores(posmax).score = scores(end_unsorted).score
            scores(end_unsorted).score = temp_int
            'swap names(posmax) with names(end_unsorted) to keep arrays parallel
            temp_str = scores(posmax).name
            scores(posmax).name = scores(end_unsorted).name
            scores(end_unsorted).name = temp_str
            end_unsorted = end_unsorted - 1
        End While
        Return scores
    End Function

    Private Function validate_integer(number As String) As Boolean
        'This Takes a candidate and returns wether each character in the candidate is an integer
        If number = "" Then                     'this checks for null string values
            Return False
        End If
        If IsNothing(number) Then               'this checks for nothing values
            Return False
        End If
        For Each i In number                    'This increments through each character in the string
            If Asc(i) < 48 Or Asc(i) > 57 Then  'These are the ascii characters that represent the digits
                Return False
            End If
        Next
        Return True                             'return true in all other cases
    End Function

    Private Function check_pawn(piece As String, move(,) As Integer) As Boolean
        'This sub checks a pawn move given the move array
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        Dim attacking, starting As Boolean
        Dim a, b, c, d As Boolean
        taken_piece = board(move(2, 1), move(2, 2))
        'will check that the piece to be taken is not being taken by the same colour (e.g. wq cannot take another wp) 
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then
            Return False
        End If
        change_x = System.Math.Abs(move(1, 1) - move(2, 1))     'the change in the x component of the move
        'abs used because direction is irrelevant
        change_y = move(2, 2) - move(1, 2)                      'a move down the screen is positive, a move up is negative
        attacking = False
        starting = False
        If board(move(2, 1), move(2, 2)) <> "" Then             'checks if the piece is attacking (if so, special rules apply)
            attacking = True
        End If
        'checks if the piece is in the starting position
        If (move(1, 2) = 2 And Mid(piece, 1, 1) = "w") Or (move(1, 2) = 7 And Mid(piece, 1, 1) = "b") Then
            starting = True
        End If
        'case where pawn is attacking
        a = attacking And Not starting And ((change_y = 1 And Mid(piece, 1, 1) = "w") Or (change_y = -1 And Mid(piece, 1, 1) = "b")) And change_x = 1
        'case where the pawn is moving 1 or 2 spaces forward from starting position, not attacking
        b = Not attacking And starting And change_x = 0 And (((change_y = 1 Or change_y = 2) And Mid(piece, 1, 1) = "w") Or ((change_y = -1 Or change_y = -2) And Mid(piece, 1, 1) = "b"))
        'case where the pawn is moving 1 space foward, not attacking, not starting
        c = Not attacking And Not starting And change_x = 0 And ((change_y = 1 And Mid(piece, 1, 1) = "w") Or (change_y = -1 And Mid(piece, 1, 1) = "b"))
        'case where the pawn is attacking on the first move
        d = attacking And starting And change_x = 1 And ((change_y = 1 And Mid(piece, 1, 1) = "w") Or (change_y = -1 And Mid(piece, 1, 1) = "b"))
        If a Or b Or c Or d Then
            Return True
        End If
        Return False
    End Function

    Private Function check_rook(piece As String, move(,) As Integer) As Boolean
        'This sub checks a rooks move
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        Dim x, y As Integer
        'rooks can move vertically and horizontally for any distance
        taken_piece = board(move(2, 1), move(2, 2))
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then   'will check that the piece that is to be taken by the rook is not of the same colour as it
            Return False
        End If
        change_x = move(2, 1) - move(1, 1)                  'a negative value indicates moving Left
        change_y = move(2, 2) - move(1, 2)                  'a negative value indicates moving backwards
        If change_x <> 0 And change_y <> 0 Then             'checks that the move is not diagonal
            Return False
        End If
        'checks movement in the x co-ordinate
        If change_x > 0 Then                                'checks wether there are any pieces in between the rook and it's destination
            x = move(1, 1) + 1                              'the +1 is so that the FOR...NEXT loop does not check the tile its self
            For i = x To x + change_x - 2                   'this will cycle through the board until it reaches the specified end point
                If board(i, move(1, 2)) <> "" Then
                    Return False
                End If
            Next i
        End If
        If change_x < 0 Then                                'case: moving backwards
            x = move(1, 1) - 1                              'the -1 is so that the FOR...NEXT loop does not check the tile its self
            For i = x To x + change_x + 2 Step -1           'cycles from Right to Left through the board
                If board(i, move(1, 2)) <> "" Then
                    Return False
                End If
            Next i
        End If
        'checks movement in the y co-ordinate
        If change_y > 0 Then
            y = move(1, 2) + 1
            For i = y To y + change_y - 2
                If board(move(1, 1), i) <> "" Then
                    Return False
                End If
            Next i
        End If
        If change_y < 0 Then                                'if the piece is moving down the board
            y = move(1, 2) - 1
            For i = y To y + change_y + 2 Step -1
                If board(move(1, 1), i) <> "" Then
                    Return False
                End If
            Next i
        End If
        Return True                                         'returns true in all other cases
    End Function

    Private Function check_horse(piece As String, move(,) As Integer) As Boolean
        'This sub checks a horses move
        'for horses move see documentation
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        Dim a, b As Boolean
        taken_piece = board(move(2, 1), move(2, 2))
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then   'will check that the piece that is to be taken by the rook is not of the same colour as it
            Return False
        End If
        change_x = System.Math.Abs(move(2, 1) - move(1, 1)) 'abs because +/- x becomes x
        change_y = System.Math.Abs(move(2, 2) - move(1, 2))
        a = change_x = 1 And change_y = 2                   'the horse has two different abs(x), abs(y) combinations that are acceptable
        b = change_x = 2 And change_y = 1
        If a Or b Then                                      'both case a and b are valid moves
            Return True
        End If
        Return False
    End Function

    Private Function check_bishop(piece As String, move(,) As Integer) As Boolean
        'bishops can move diagonally for any distance
        'for horses move see documentation
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        Dim temp As String
        Dim x, y As Integer
        taken_piece = board(move(2, 1), move(2, 2))
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then               'will check that the piece that is to be taken by the rook is not of the same colour as it
            Return False
        End If
        change_x = move(2, 1) - move(1, 1)                              'the direction of the movment in the x and y axis is important so no abs is used
        change_y = move(2, 2) - move(1, 2)
        If System.Math.Abs(change_x) <> System.Math.Abs(change_y) Then  'this checks that the move is diagonal
            Return False
        End If
        temp = get_increment(change_x, change_y)                        'used to indicate which direction to increment the x and y values
        x = move(1, 1)
        y = move(1, 2)
        'will cycle through the tiles in between the piece and its destination
        While x < move(2, 1) - 1 Or x > move(2, 1) + 1                  'uses the fact that abs(x) = abs(y)
            If Mid(temp, 1, 1) = "+" Then
                x = x + 1
            Else
                x = x - 1
            End If
            If Mid(temp, 2, 1) = "+" Then
                y = y + 1
            Else
                y = y - 1
            End If
            If board(x, y) <> "" Then                                   'checks that the piece is not "jumping" any other pieces
                Return False
            End If
        End While
        Return True                                                     'This returns true for all other paths
    End Function

    Private Function get_increment(change_x As Integer, change_y As Integer) As String
        'used with the check_bishop function
        'this checks wether to increment or decrement x and y and Returns a string
        If change_x > 0 Then            'if change_x > 0, then the piece is moving diagonally to the Right
            If change_y > 0 Then        'if change_y > 0 then the piece is moving diagonally forward
                Return "++"
            Else
                Return "+-"
            End If
        Else
            If change_y > 0 Then
                Return "-+"
            Else
                Return "--"
            End If
        End If
    End Function

    Private Function check_queen(piece As String, move(,) As Integer) As Boolean
        'queen can move vertically, horizontally or diagonally for any distance
        'since the queen move is made up of rook and bishop moves, this uses the other functions
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        taken_piece = board(move(2, 1), move(2, 2))
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then                       'will check that the piece that is to be taken by the rook is not of the same colour as it
            Return False
        End If
        change_x = move(2, 1) - move(1, 1)
        change_y = move(2, 2) - move(1, 2)
        If System.Math.Abs(change_x) = System.Math.Abs(change_y) Then           'checks a diagonal move
            Return check_bishop(piece, move)
        End If
        If (change_x = 0 And change_y <> 0) Or (change_x <> 0 And change_y = 0) Then
            Return check_rook(piece, move)
        End If
        Return False
    End Function

    Private Function check_king(piece As String, move(,) As Integer) As Boolean
        'king can move vertically, horizontally or diagonally 1 space
        'similarly to a queen, a king move is made up of rook and bishop moves
        Dim taken_piece As String
        Dim change_x, change_y As Integer
        taken_piece = board(move(2, 1), move(2, 2))
        If Mid(piece, 1, 1) = Mid(taken_piece, 1, 1) Then                                   'will check that the piece that is to be taken by the rook is not of the same colour as it
            Return False
        End If
        change_x = move(2, 1) - move(1, 1)
        change_y = move(2, 2) - move(1, 2)
        If (change_x >= -1 And change_x <= 1) And (change_y >= -1 And change_y <= 1) Then   'This checks that the move is only one square
            Return True
        End If
        Return False
    End Function

End Class


==========================================================================================


'Imports System.IO for use in creating a text file
'Allows Visuall Basic to interface with the Operating System and provides certain functionality akin to that of the Command Prompt
Imports System.IO
Public Class frmNewGame
    Public game_title As String
    Dim txtP1name, txtP2name, txtGameName As New TextBox
    Dim lblP1name, lblP2name, lblGameName As New Label
    Dim txt_array(3) As TextBox
    Dim lbl_array(3) As Label
    Dim btnCreate, btnCancel, btnHelp As New Button

    Private Sub frmNewGame_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'This creates the form on start-up
        fill_control_arrays()   'Fill the control array
        create_board()          'Output the controls onto the form
    End Sub

    Private Sub Help_Click(sender As Object, e As System.EventArgs)
        MsgBox("The Game Name must contain only Capital letters, lower case letters or numbers and be at least one character in length. No spaces or special characters." & vbNewLine & _
               "The Initials of each player must be capital letters only, no spaces, numbers or lower case letter. They must be at least one character in length and less than six.")
    End Sub

    Private Sub Cancel_Click(sender As Object, e As System.EventArgs)
        'Return to the main screen
        frmMain.Show()
        Me.Close()
    End Sub

    Private Sub Create_Click(sender As Object, e As System.EventArgs)
        'This activates when the create new game button is clicked
        'It gets the values of the textboxes, validates them and creates a new save file
        Dim valid As Boolean = True                 'Assume true
        Dim error1, error2, error3 As String        'These store text for the three errors that can result from incorrect data entry
        get_details(valid, error1, error2, error3)  'These are all ByRef so they will be changed by the get_details sub
        If valid Then                               'Valid means that all three data values are correct
            save_to_file()                          'Create a new save file with the title of the game
            frmGame.Show()                          'Show the game form
            Me.Close()                              'Close this form
        Else
            MsgBox(error3 & vbNewLine & error1 & vbNewLine & error2) 'Return any of the errors that occurred with data entry
        End If
    End Sub

    Private Sub get_details(ByRef valid, ByRef error1, ByRef error2, ByRef error3)
        'This sub must get the values from the three text boxes and validate them
        Dim temp_p1name, temp_p2name, temp_gametitle As String      'These store temporary output from the text boxes
        temp_p1name = txtP1name.Text                                'Get the output
        temp_p2name = txtP2name.Text
        temp_gametitle = txtGameName.Text
        If validate_initials(temp_p1name) Then                      'This validates the initials that were entered
            frmGame.p1name = CStr(temp_p1name)                      'This sets the public p1name to the value entered
        Else
            error1 = "The Initials entered for Player 1 are invalid" 'Set error1 to this text because the data was entered incorrectly
            txtP1name.Clear()                                       'Clear the textbox
            valid = False                                           'Valid is set to false to indicate that at least one value was wrong
        End If
        If validate_initials(temp_p2name) Then                      'Validate the initials entered for player 2
            frmGame.p2name = CStr(temp_p2name)
        Else
            error2 = "The Initials entered for Player 2 are invalid"
            txtP2name.Clear()
            valid = False
        End If
        If validate_game(temp_gametitle) Then                       'Validate the game name that was entered against different criteria
            game_title = CStr(temp_gametitle)
        Else
            error3 = "Title for the game is invalid"
            txtGameName.Clear()
            valid = False
        End If
        frmGame.turn = "p1"
    End Sub

    Private Sub create_board()
        'This sub must create the board which consists of 3 text boxes, 3 labels and 3 buttons
        Dim x_ratio As Single = Screen.PrimaryScreen.Bounds.Width                   'get the width of the screen in pixels
        Dim y_ratio As Single = Screen.PrimaryScreen.Bounds.Height                  'get the height of the screen in pixels
        Dim x_coordinate, y_coordinate As Integer
        'y_ratio = 720
        'x_ratio = 1280
        Me.Size = New System.Drawing.Size(0.2 * x_ratio, 0.3 * y_ratio)             'set the size of the board
        Me.Location = New System.Drawing.Point(0.42 * x_ratio, 0.25 * y_ratio)      'set the location of the board
        x_ratio = x_ratio / 1920                                                    'get the ratio of the x and y bounds compared to a  1080p screen
        y_ratio = y_ratio / 1080
        Me.Text = "New Game"                                                        'set the text of the board
        x_coordinate = 40 * x_ratio
        y_coordinate = 40 * y_ratio
        For i = 1 To 3                                                              'the text boxes and lables are in arrays
            x_coordinate = x_coordinate + 200 * x_ratio                             'x changes for the textboxes and labels by 200
            With txt_array(i)
                .Size = New System.Drawing.Size(100 * x_ratio, 45 * y_ratio)
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
            End With
            x_coordinate = x_coordinate - 200 * x_ratio                             'This resets x for the labels
            With lbl_array(i)                                                       'Set the values for the labels
                .Size = New System.Drawing.Size(165 * x_ratio, 45 * y_ratio)
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
                .Font = New System.Drawing.Font("standard", Int(13 * x_ratio), FontStyle.Regular)
                Select Case i                                                       'The text needs to be one of three values, so a multiway selection is used
                    Case 1 : .Text = "Game Name"
                    Case 2 : .Text = "Player 1 Initials"
                    Case 3 : .Text = "Player 2 Initials"
                End Select
            End With
            y_coordinate = y_coordinate + 40 * y_ratio
            Me.Controls.Add(lbl_array(i))                                           'Add both the labels and text boxes to the controls
            Me.Controls.Add(txt_array(i))
        Next
        With btnCreate                                                              'deal with the three buttons that are used
            .Location = New System.Drawing.Point(130 * x_ratio, 200 * y_ratio)
            .Size = New System.Drawing.Size(100 * x_ratio, 40 * y_ratio)
            .Text = "Create Game"
        End With
        With btnCancel
            .Location = New System.Drawing.Point(240 * x_ratio, 200 * y_ratio)
            .Size = New System.Drawing.Size(100 * x_ratio, 40 * y_ratio)
            .Text = "Cancel"
        End With
        With btnHelp
            .Location = New System.Drawing.Point(20 * x_ratio, 200 * y_ratio)
            .Size = New System.Drawing.Size(100 * x_ratio, 40*y_ratio)
            .Text = "Help"
        End With
        'Add the click events to the buttons
        AddHandler btnHelp.Click, AddressOf Help_Click
        AddHandler btnCreate.Click, AddressOf Create_Click
        AddHandler btnCancel.Click, AddressOf Cancel_Click
        'Add buttons to the controls
        Me.Controls.Add(btnHelp)
        Me.Controls.Add(btnCreate)
        Me.Controls.Add(btnCancel)
    End Sub

    Private Sub save_to_file()
        'This creates a new text file with the name of game_title + ".txt"
        Dim path As String = Application.StartupPath & "\saved games\" & game_title & ".txt"    'The path is declared here to shorten the next statment
        Dim fs As FileStream = File.Create(path)                                                'This uses the import IO module to create a file in the location given
        fs.Close()                                                                              'Close the file
    End Sub

    Private Sub fill_control_arrays()
        'Fill the two control arrays that hold the text boxes and labels
        'input text boxes
        txt_array(1) = txtGameName
        txt_array(2) = txtP1name
        txt_array(3) = txtP2name

        'input labels
        lbl_array(1) = lblGameName
        lbl_array(2) = lblP1name
        lbl_array(3) = lblP2name
    End Sub

    Private Function validate_game(candidate As String) As Boolean
        'This sub is designed to validate a given game title
        'A game title is valid is it has only upper & lower case letter or numbers

        'This is a lambda function that takes an ascii code and checks that it is within an acceptable range
        'That is between 48 & 57 or between 65 & 90 or between 97 & 122
        'It is a good way to avoid large boolean computations within an if statement
        Dim valid = Function(x) (x >= 48 And x <= 57) Or (x >= 65 And x <= 90) Or (x >= 97 And x <= 122)
        If candidate = "" Then                      'Stop a game title being nothing
            Return False
        End If
        For Each character In candidate             'Cycle through each character in the candidate
            If Not valid(Asc(character)) Then       'Check the ascii code using the valid function
                Return False                        'Return false if any of the characters are invalid
            End If
        Next
        Return True                                 'Return True in all other cases
    End Function

    Private Function validate_initials(initials As String) As Boolean
        'This function will take a string and return a boolean indicating whether it meets the criteria of initials
        'initials are defined as at least one character in length, no more than 5 characters in length
        'all characters are capital letters of the english alphabet (ascii 65 to 90)
        If IsNothing(initials) Then                         'checks that nothing is not entered
            Return False
        End If
        If Len(initials) <= 0 Or Len(initials) >= 6 Then    'checks the length of the input
            Return False
        End If
        For Each i In initials                              'cycles through each character initials
            If Asc(i) < 65 Or Asc(i) > 90 Then              'checks that the characters ascii number is that of a capital letter
                Return False
            End If
        Next
        Return True                                         'return true in all other cases
    End Function

End Class


==========================================================================================


Public Class frmLoad
    Public game_loaded As Boolean = False
    Public p1grave(0), p2grave(0) As String
    Dim games As New ArrayList()
    Dim lstGames As New ListBox
    Dim lblHeading As New Label
    Dim btnPlay, btnCancel As New Button
    Private Sub frmLoad_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'This creates the board and gets a list of the games that are available
        create_board()
        get_games()
    End Sub

    Private Sub Cancel_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This closes the form
        frmMain.Show()  'This quits the form
        Me.Close()
    End Sub

    Private Sub create_board()
        'This creates the board which is a simple list box, label and two buttons
        Dim x_ratio As Single = Screen.PrimaryScreen.Bounds.Width               'Get the width of the screen in pixels
        Dim y_ratio As Single = Screen.PrimaryScreen.Bounds.Height              'Get the height of the screen in pixels
        'y_ratio = 720
        'x_ratio = 1280
        Me.Size = New System.Drawing.Size(x_ratio * 0.15, y_ratio * 0.4)        'set the size of the form in relation to the screen
        Me.Location = New System.Drawing.Point(0.42 * x_ratio, 0.25 * y_ratio)  'set the location of the form in relation to the screen
        x_ratio = x_ratio / 1920                                                'set the x and y ratios in comparison to a 1080p screen
        y_ratio = y_ratio / 1080
        Me.Text = "Load Game"                                                   'Set the text of the form
        With lstGames                                                           'Describe the list box
            .Size = New System.Drawing.Size(140 * x_ratio, 250 * y_ratio)
            .Location = New System.Drawing.Point(50 * x_ratio, 40 * y_ratio)
        End With
        'Add to controls
        Me.Controls.Add(lstGames)

        With lblHeading                                                         'Describe the heading label
            .Size = New System.Drawing.Size(200 * x_ratio, 30 * y_ratio)
            .Location = New System.Drawing.Point(35 * x_ratio, 10 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(13 * x_ratio), FontStyle.Underline)
            .Text = "Availabel Games"
        End With
        'Add to controls
        Me.Controls.Add(lblHeading)

        With btnCancel                                                          'Describe the cancel button
            .Location = New System.Drawing.Point(10 * x_ratio, 320 * y_ratio)
            .Size = New System.Drawing.Size(115 * x_ratio, 35 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
            .Text = "Cancel"
        End With
        'Add to controls
        Me.Controls.Add(btnCancel)
        'Add Click Event
        AddHandler btnCancel.Click, AddressOf Cancel_Click

        With btnPlay                                                            'Describe the Delete button
            .Location = New System.Drawing.Point(130 * x_ratio, 320 * y_ratio)
            .Size = New System.Drawing.Size(115 * x_ratio, 35 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
            .Text = "Play"
        End With
        'Add to controls
        Me.Controls.Add(btnPlay)
        'Add Click Event
        AddHandler btnPlay.Click, AddressOf Play_Click
    End Sub

    Private Sub Play_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This activates when the delete button is clicked
        'It gets the selected item in the list box and deletes the appropriate file
        Dim index As Integer
        Dim path As String = Application.StartupPath & "\saved games\"      'This is the path that all the game files are located in
        index = lstGames.SelectedIndex                                      'This is the index of the selected item in the list box
        If index <> -1 Then                                                 'index is -1 if nothing is selected
            frmNewGame.game_title = games(index)
            game_loaded = True                                              'Boolean indicating that the game has been loaded instead of a new game
            get_saved_game(frmNewGame.game_title)                           'Gets the data from the sequential file
            get_grave()                                                     'Searches the board array and finds any missing pieces and places them in the grave
            Me.Close()
            frmGame.Show()
        End If
    End Sub

    Private Sub get_saved_game(file)
        'This sub reads a sequential file and puts the information into various variables and arrays
        'The files are all written in a certain way to allow for this to happen
        'p1name, p1score, p2name, p2score, turn, each element in the board from left to right and top to bottom
        FileSystem.FileOpen(1, Application.StartupPath & "\saved games\" & file & ".txt", OpenMode.Input)
        FileSystem.Input(1, frmGame.p1name)         'read p1name
        FileSystem.Input(1, frmGame.p1score)        'read p1score
        FileSystem.Input(1, frmGame.p2name)         'read p2name
        FileSystem.Input(1, frmGame.p2score)        'read p2score
        FileSystem.Input(1, frmGame.turn)           'read turn
        For y = 1 To 8                              'is written left to right and top to bottom so y is on the outside
            For x = 1 To 8
                FileSystem.Input(1, frmGame.board(x, y)) 'fill the board array according to the file
            Next x
        Next y
        FileSystem.FileClose(1)                     'close the file
    End Sub

    Private Sub get_grave()
        'This sub must search the board array and find any missing pieces, these pieces will represent pieces which have been taken by the other players
        'This requires a counting algorithm which counts the number of objects in an array
        Dim p1counter, p2counter As Integer
        Dim counter As Integer
        Dim pieces(2) As String                                 'This array holds all the pieces which are in pairs (knights, rooks and bishops)
        pieces(0) = "r"
        pieces(1) = "h"
        pieces(2) = "b"
        p1counter = 0                                           'The p1grave() and p2grave() are both zero indexed
        p2counter = 0
        counter = count_objects(frmGame.board, "wp")            'count the number of white pawns on the board (there are supposed to be 8)
        For i = 1 To 8 - counter                                'This runs if less than 8 pawns are found and it runs for the number of pawns less than 8 that are found
            ReDim p1grave(p1counter)
            p1grave(p1counter) = "wp"
            p1counter = p1counter + 1
        Next
        counter = count_objects(frmGame.board, "bp")            'This does the same process for black pawns
        For i = 1 To 8 - counter
            ReDim p2grave(p2counter)
            p2grave(p2counter) = "bp"
            p2counter = p2counter + 1
        Next
        For Each i In pieces                                    'This takes care of the main pieces (knights, rooks and bishops)
            counter = count_objects(frmGame.board, "w" & i)     'This counts the white pieces
            For r = 1 To 2 - counter                            'appends piece to grave array if not found
                ReDim p1grave(p1counter)
                p1grave(p1counter) = "w" & i
                p1counter = p1counter + 1
            Next
            counter = count_objects(frmGame.board, "b" & i)     'This counts the black pieces
            For r = 1 To 2 - counter
                ReDim p2grave(p2counter)
                p2grave(p2counter) = "b" & i
                p2counter = p2counter + 1
            Next
        Next
        counter = count_objects(frmGame.board, "wq")            'This deals with the white queen (of which there is only one)
        If counter <> 1 Then
            ReDim Preserve p1grave(p1counter)
            p1grave(p1counter) = "wq"
        End If
        counter = count_objects(frmGame.board, "bq")            'This deals with the black queen (of which there is only one)
        If counter <> 1 Then
            ReDim Preserve p2grave(p2counter)
            p2grave(p2counter) = "bq"
        End If
        'The graves should now contain the disparity between the starting board and the saved board.
        'this means that the score of all the pieces in p1grave should be equal to p2score and similarly for p2grave and p1score
    End Sub

    Private Sub get_games()
        'This sub looks in the saved games folder and makes a list of all the items there
        'It adds these items to the list box
        Dim path As String = Application.StartupPath & "\saved games\"          'This is the folder that holds the score files
        Dim name As String
        Dim start As Integer                                                    'This is used to get just the text file name by cutting out the file path
        start = path.Length + 1
        For Each foundfile As String In My.Computer.FileSystem.GetFiles(path)   'This iterates through the files in the folder
            name = Mid(foundfile, start, foundfile.Length - start - 3)          'This selects just the Filename (without ".txt" on the end)
            games.Add(name)                                                     'Arraylist's have a .Add method which is useful
            lstGames.Items.Add(name)                                            'Add name to the list box
        Next foundfile
    End Sub

    Private Function count_objects(list(,) As String, search_item As String) As Integer
        'This sub takes a two dimensional array and a search_item and counts the number of occurrences of that item in the array
        'It returns an integer representing this number
        'It uses a linear search mechanism to search through the 2d array
        Dim counter As Integer                      'This is used to count the number of occurrences
        counter = 0
        For x = 0 To list.GetUpperBound(0)          'This is the upper bound of the first dimension (vb is zero indexed)
            For y = 0 To list.GetUpperBound(1)      'This is the upper bound of the second dimension
                If list(x, y) = search_item Then    'compare the element with the search item
                    counter = counter + 1           'If they are the same, increment counter
                End If
            Next y
        Next x
        Return counter
    End Function

End Class


==========================================================================================


Public Class frmDeleteGame
    Dim games As New ArrayList()            'Used for it’s add and remove methods which aren't available with arrays
    Dim lstGames As New ListBox
    Dim lblHeading As New Label
    Dim btnDelete, btnCancel As New Button
    Private Sub frmDeleteGame_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'This activates when the player clicks the delete button on the main form
        create_board()      'This creates the board
        get_games()         'This looks in the "saved games" folder and gets a list of all files there
    End Sub

    Private Sub Cancel_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        frmMain.Show()  'This quits the form
        Me.Close()
    End Sub

    Private Sub Delete_Click(ByVal sender As Object, ByVal e As System.EventArgs)
        'This activates when the delete button is clicked
        'It gets the selected item in the list box and deletes the appropriate file
        Dim index As Integer
        Dim path As String = Application.StartupPath & "\saved games\"          'This is the path that all the game files are located in
        index = lstGames.SelectedIndex                                          'This is the index of the selected item in the listbox
        If index <> -1 Then                                                     'index is -1 if nothing is selected
            lstGames.Items.RemoveAt(index)                                      'This removes the item from the listbox
            My.Computer.FileSystem.DeleteFile(path & games(index) & ".txt")     'This deletes the file
            games.RemoveAt(index)                                               'an Arraylist has a RemoveAt method which is used here for efficiency
        End If

    End Sub

    Private Sub create_board()
        'This creates the board which is a simple list box, label and two buttons
        'This sub has to consider the screen resolution of the screen running the program compared to a 1080p screen
        Dim x_ratio As Single = Screen.PrimaryScreen.Bounds.Width   'Get the screen dimensions in pixels
        Dim y_ratio As Single = Screen.PrimaryScreen.Bounds.Height
        'y_ratio = 720
        'x_ratio = 1280
        Me.Size = New System.Drawing.Size(x_ratio * 0.15, y_ratio * 0.4)        'This sets the size of the form in relation to that of the screen
        Me.Location = New System.Drawing.Point(0.42 * x_ratio, 0.25 * y_ratio)  'Set the location of the form in relation to that of the screen
        x_ratio = x_ratio / 1920                                                'The x ratio is the width of the screen / width of my screen (1920)
        y_ratio = y_ratio / 1080                                                'The y ratio is thae height of the screen / height of my screen (1080)
        Me.Text = "Delete Game"                                                 'Set the text of the form
        With lstGames                                                           'Describe the list box in relation to the screen
            .Size = New System.Drawing.Size(140 * x_ratio, 250 * y_ratio)
            .Location = New System.Drawing.Point(50 * x_ratio, 40 * y_ratio)
        End With
        'Add to controls
        Me.Controls.Add(lstGames)

        With lblHeading                                                         'Describe the heading label in relation to the screen
            .Size = New System.Drawing.Size(200 * x_ratio, 30 * y_ratio)
            .Location = New System.Drawing.Point(35 * x_ratio, 10 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(13 * x_ratio), FontStyle.Underline)
            .Text = "Available Games"
        End With
        'Add to controls
        Me.Controls.Add(lblHeading)

        With btnCancel                                                          'Describe the cancel button
            .Location = New System.Drawing.Point(10 * x_ratio, 320 * y_ratio)
            .Size = New System.Drawing.Size(115 * x_ratio, 35 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
            .Text = "Cancel"
        End With
        'Add to controls
        Me.Controls.Add(btnCancel)
        'Add Click Event
        AddHandler btnCancel.Click, AddressOf Cancel_Click

        With btnDelete                                                          'Describe the Delete button
            .Location = New System.Drawing.Point(130 * x_ratio, 320 * y_ratio)
            .Size = New System.Drawing.Size(115 * x_ratio, 35 * y_ratio)
            .Font = New System.Drawing.Font("standard", Int(12 * x_ratio), FontStyle.Regular)
            .Text = "Delete"
        End With
        'Add to controls
        Me.Controls.Add(btnDelete)
        'Add Click Event
        AddHandler btnDelete.Click, AddressOf Delete_Click
    End Sub

    Private Sub get_games()
        'This sub looks in the saved games folder and makes a list of all the items there
        'It adds these items to the list box
        Dim path As String = Application.StartupPath & "\saved games\"          'This is the folder that holds the score files
        Dim name As String
        Dim start As Integer                                                    'This is used to get just the text file name by cutting out the file path
        start = path.Length + 1
        For Each foundfile As String In My.Computer.FileSystem.GetFiles(path)   'This iterates through the files in the folder
            name = Mid(foundfile, start, foundfile.Length - start - 3)          'This selects just the Filename (without ".txt" on the end)
            games.Add(name)                                                     'Arraylist's have a .Add method which is useful
            lstGames.Items.Add(name)                                            'Add name to the list box
        Next foundfile
    End Sub
End Class


==========================================================================================


Public Class frmPawnSelection
    Dim rbtnRook, rbtnHorse, rbtnBishop, rbtnQueen As New RadioButton
    Dim lblHeading As New Label
    Dim btnSelect As New Button
    Dim rbtn_array(4) As RadioButton
    Public promotion_selection As String
    Private Sub PawnSelection_Load(sender As Object, e As System.EventArgs) Handles MyBase.Load
        'The form is opened as a customised message box so code execution will cease in the game form once this is opened
        'When activated, this sub dynamically creates the  board
        fill_control_array()
        create_board()
        promotion_selection = "q"
        'This sets the selection to queen if the cancel button is clicked.
        'thus avoiding a "file not found" error when the game tries to load a non-existent image
    End Sub

    Private Sub Select_Click(sender As Object, e As System.EventArgs)
        'This button submits the selected choice of promotion
        For i = 1 To 4                                      'Cycle through the array of radio buttons and find the selected one
            If rbtn_array(i).Checked Then
                promotion_selection = rbtn_array(i).Text    'get the text value of the selected radio button
            End If
        Next i
        Select Case promotion_selection                     'This converts the button text to a one letter acronym (one letter because it is independent of color)
            Case "Rook" : promotion_selection = "r"
            Case "Knight" : promotion_selection = "h"
            Case "Bishop" : promotion_selection = "b"
            Case "Queen" : promotion_selection = "q"
        End Select
        Me.Close()                                          'Close the form
    End Sub

    Private Sub create_board()
        'This creates the board elements
        Dim y_coordinate, x_coordinate As Integer
        Dim width As Single = Screen.PrimaryScreen.Bounds.Width
        Dim height As Single = Screen.PrimaryScreen.Bounds.Height
        Me.Size = New System.Drawing.Size(250, 300)             'set the size of the board
        Me.Location = New System.Drawing.Point(0.42 * width, 0.25 * height)      'set the location of the board
        x_coordinate = 65                         'The x co-ordinate remains constant for all the radio buttons
        y_coordinate = 20                               'The y co-ordinate starts at 55 pixels but is set at 20 to account for the increase in the for loop
        For i = 1 To 4                                  'Cycle through the array of radio buttons
            y_coordinate = y_coordinate + 35            'Set a 35 pixel gap between the radio buttons
            With rbtn_array(i)
                .Location = New System.Drawing.Point(x_coordinate, y_coordinate)
                .Size = New System.Drawing.Size(80, 30)
                Select Case i                           'select what text to add to the radio buttons
                    Case 1 : .Text = "Rook"
                    Case 2 : .Text = "Knight"
                    Case 3 : .Text = "Bishop"
                    Case 4 : .Text = "Queen"
                End Select
                Me.Controls.Add(rbtn_array(i))          'add to the controls
            End With
        Next i
        'define the select button
        With btnSelect
            .Location = New System.Drawing.Point(70, 190)
            .Size = New System.Drawing.Size(70, 30)
            .Text = "Select"
        End With
        'add to the controls
        Me.Controls.Add(btnSelect)
        'add click event
        AddHandler btnSelect.Click, AddressOf Select_Click

        'define the lable
        With lblHeading
            .Location = New System.Drawing.Point(20, 15)
            .Size = New System.Drawing.Size(210, 40)
            .Text = "Your Pawn has been promoted, what would you like to select?"
        End With
        'Add to the controls
        Me.Controls.Add(lblHeading)
    End Sub

    Private Sub fill_control_array()
        'fill the control arrays that are used to hold the radio buttons
        rbtn_array(1) = rbtnRook
        rbtn_array(2) = rbtnHorse
        rbtn_array(3) = rbtnBishop
        rbtn_array(4) = rbtnQueen
    End Sub
End Class